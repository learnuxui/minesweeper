{"version":3,"sources":["store/InitialState.js","reducers/index.js","reducers/game.js","constants/ActionTypes.js","actions/GameActions.js","constants/AppConstants.js","classes/Grid.js","util/Utilities.js","actions/InitActions.js","actions/GamePlayActions.js","components/Level.js","components/Header.js","components/Mine.js","components/PlaceHolder.js","components/Count.js","components/FlagMark.js","components/Cell.js","components/CheatBoard.js","components/Content.js","components/GameOver.js","components/Footer.js","components/Main.js","App.js","containers/AppContainer.js","store/ConfigureStore.js","index.js"],"names":["game","grid","level","mineMarked","gameOver","score","totalMines","levels","EASY","MODRATE","HARD","rootReducer","combineReducers","state","InitialState","action","type","value","setGrid","Grid","row","col","this","isOpen","neighbors","isMine","markAsMine","getRandomInt","max","Math","floor","random","initGrid","dispatch","getState","i","j","cell","getNeighborsCount","setNeighbors","mineLocations","length","location","indexOf","push","setMines","openMines","count","openCell","cellData","openEmptySpots","endGame","changeScore","filter","startOver","lvl","stage","changeDifficultyLevel","Level","onChange","bind","event","props","target","React","Component","Header","handleStartOver","e","preventDefault","className","icon","faFlag","onClick","faSync","Mine","faBomb","PlaceHolder","Count","FlagMark","faCheck","faTimes","Cell","handleClick","handleFlagMark","splice","findIndex","setMineMarker","markFlag","getClassName","onContextMenu","CheatBoard","renderMine","renderCount","renderPlaceHolder","Content","item","dummy","key","data","map","renderItem","cellPadding","renderRow","GameOver","Footer","handleFinish","data-tip","data-for","faInfo","id","place","effect","Main","App","handleContextMenu","document","addEventListener","AppContainer","error","info","console","log","connect","initialState","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41ac08e9.chunk.js","sourcesContent":["export default {\r\n  game: {\r\n    grid: null,\r\n    level: 10,\r\n    mineMarked: [],\r\n    gameOver: false,\r\n    score: 0,\r\n    totalMines: 20,\r\n    levels: {EASY: 10,\r\n      MODRATE: 14,\r\n      HARD: 16\r\n    }\r\n  },\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport game from \"./game\";\r\nconst rootReducer = combineReducers({\r\n  game,\r\n});\r\n\r\nexport default rootReducer;\r\n","import * as GAME_ACTION_TYPES from \"../constants/ActionTypes\";\r\nimport InitialState from \"../store/InitialState\";\r\n\r\nexport default function game(state = InitialState.game, action) {\r\n  switch (action.type) {\r\n    case GAME_ACTION_TYPES.SET_GRID:\r\n      return { ...state, grid: action.grid };\r\n    case GAME_ACTION_TYPES.CHANGE_DIFFICULTY_LEVEL:\r\n      return { ...state, level: action.level };\r\n    case GAME_ACTION_TYPES.GAME_OVER:\r\n      return { ...state, gameOver: action.value };\r\n    case GAME_ACTION_TYPES.MINE_MARKED:\r\n      return { ...state, mineMarked: action.mineMarked };\r\n    case GAME_ACTION_TYPES.RESET_MINE_MARKER:\r\n      return { ...state, mineMarked: [] };\r\n    case GAME_ACTION_TYPES.CHANGE_TOTAL_MINES:\r\n      return { ...state, totalMines: action.value };\r\n    case GAME_ACTION_TYPES.CHANGE_SCORE:\r\n      return { ...state, score: action.score };\r\n    case GAME_ACTION_TYPES.CHANGE_LEVELS:\r\n        return { ...state, levels: action.levels };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const SET_GRID = \"SET_GRID\";\r\nexport const CHANGE_DIFFICULTY_LEVEL = \"CHANGE_DIFFICULTY_LEVEL\";\r\nexport const CHANGE_SCORE = \"CHANGE_SCORE\";\r\nexport const GAME_OVER = \"GAME_OVER\";\r\nexport const RESET_MINE_MARKER = \"RESET_MINE_MARKER\";\r\nexport const MINE_MARKED = \"MINE_MARKED\";\r\nexport const CHANGE_TOTAL_MINES = \"CHANGE_TOTAL_MINES\";\r\nexport const CHANGE_LEVELS = \"CHANGE_LEVELS\";","import * as GAME_ACTION_TYPES from \"../constants/ActionTypes\";\r\n\r\nexport function setGrid(grid) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.SET_GRID,\r\n        grid,\r\n      };\r\n}\r\n\r\nexport function changeDifficultyLevel(level) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.CHANGE_DIFFICULTY_LEVEL,\r\n        level,\r\n    };\r\n}\r\n\r\nexport function gameOver(value) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.GAME_OVER,\r\n        value,\r\n    };\r\n}\r\n\r\nexport function resetMineMarker() {\r\n    return {\r\n        type: GAME_ACTION_TYPES.RESET_MINE_MARKER,\r\n    };\r\n}\r\n\r\nexport function setMineMarker(mineMarked) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.MINE_MARKED,\r\n        mineMarked,\r\n    };\r\n}\r\n\r\nexport function changeTotalMines(value) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.CHANGE_TOTAL_MINES,\r\n        value,\r\n    };\r\n}\r\n\r\nexport function changeScore(score) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.CHANGE_SCORE,\r\n        score,\r\n    };\r\n}\r\n\r\nexport function changeLevels(levels) {\r\n    return {\r\n        type: GAME_ACTION_TYPES.CHANGE_LEVELS,\r\n        levels,\r\n    };\r\n}","// export const GAME_LEVEL = {\r\n//     EASY: 10,\r\n//     MODRATE: 14,\r\n//     HARD: 18\r\n// };\r\n// export const BOX_TYPES = {\r\n//     EMPTY: 1,\r\n//     MINE: 2,\r\n//     PERK: 3\r\n// }\r\nexport const SCORE_MULTIPLIER = 10;","\r\n\r\nconst Grid = class {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.isOpen = false;\r\n        this.neighbors = 0;\r\n        this.isMine = false;\r\n        this.markAsMine = false;\r\n    }\r\n};\r\n\r\nexport default Grid;\r\n\r\n","\r\nexport function getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n","import { setGrid, gameOver, resetMineMarker } from \"./GameActions\";\r\nimport Grid from \"../classes/Grid\";\r\nimport { getRandomInt } from \"../util/Utilities\";\r\n\r\nexport function initGrid() {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { level, totalMines } = game;\r\n        const grid = [];\r\n        dispatch(gameOver(false));\r\n        dispatch(resetMineMarker());\r\n        let i, j = 0;\r\n        for (i = 0; i < level; i++) {\r\n            grid[i] = [];\r\n            for (j = 0; j < level; j++) {\r\n                grid[i][j] = new Grid(i, j);\r\n            }\r\n        }\r\n        dispatch(setNeighbors(setMines(grid, level, totalMines)));\r\n    };\r\n}\r\n\r\nexport function setNeighbors(grid) {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { level } = game;\r\n        let i, j;\r\n        for (i = 0; i < level; i++) {\r\n            for (j = 0; j < level; j++) {\r\n                const cell = grid[i][j];\r\n                if (!cell.isMine) {\r\n                    cell.neighbors = getNeighborsCount(grid, cell, level);\r\n                }\r\n            }\r\n        }\r\n        dispatch(setGrid(grid));\r\n    };\r\n}\r\n\r\n// Show all the mines\r\nexport function openMines() {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { grid, level } = game;\r\n        let row, col;\r\n        for (row = 0; row < level; row++) {\r\n            for (col = 0; col < level; col++) {\r\n                //if (grid[row][col].isMine) {\r\n                    grid[row][col].isOpen = true;\r\n                //}\r\n            }\r\n        }\r\n        dispatch(setGrid(grid));\r\n    };\r\n}\r\n\r\nfunction setMines(grid, level, totalMines) {\r\n    const mineLocations = [];\r\n    while (mineLocations.length < totalMines) {\r\n        const row = getRandomInt(level);\r\n        const col = getRandomInt(level);\r\n        const location = `(${row}-${col})`;\r\n        if (mineLocations.indexOf(location) === -1) {\r\n            mineLocations.push(location);\r\n            grid[row][col].isMine = true;\r\n            grid[row][col].neighbors = -1;\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction getNeighborsCount(grid, cell, level) {\r\n    const { row, col } = cell;\r\n    let count = 0;\r\n    let i, j;\r\n    for (i = row - 1; i <= row + 1; i++) {\r\n        for (j = col - 1; j <= col + 1; j++) {\r\n            if ( (i === row && j === col) ||\r\n                 (i < 0 || i >= level) || \r\n                 (j < 0 || j >= level)) {\r\n                    continue;\r\n                 }\r\n            if (grid[i][j].isMine) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n\r\n}\r\n","import { setGrid, gameOver, setMineMarker, changeScore, changeTotalMines, changeDifficultyLevel } from \"./GameActions\";\r\nimport { SCORE_MULTIPLIER } from \"../constants/AppConstants\";\r\nimport { initGrid } from \"./InitActions\";\r\n\r\n\r\nexport function openCell(cellData) {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { grid } = game;\r\n        cellData.isOpen = true;\r\n        grid[cellData.row][cellData.col] = cellData;\r\n        if (cellData.neighbors === 0) {\r\n            dispatch(openEmptySpots(grid, cellData));\r\n        }\r\n        dispatch(setGrid(grid));\r\n    };\r\n}\r\n\r\nexport function markFlag(cellData) {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { grid, mineMarked } = game;\r\n        const { row, col } = cellData;\r\n        grid[row][col] = cellData;\r\n        dispatch(setGrid(grid));\r\n        if (cellData.markAsMine) {\r\n            mineMarked.push(cellData);\r\n        } else {\r\n            mineMarked.splice(mineMarked.findIndex(cell => cell.row === cellData.row && cell.col === cellData.col), 1);\r\n        }\r\n        dispatch(setMineMarker(mineMarked));\r\n    };\r\n}\r\n\r\nfunction openEmptySpots(grid, cellData) {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { level } = game;\r\n        const { row, col } = cellData;\r\n        if (cellData.neighbors === -1) {\r\n            return;\r\n        }\r\n        let i, j;\r\n        for (i = row - 1; i <= row + 1; i++) {\r\n            for (j = col - 1; j <= col + 1; j++) {\r\n                if ((i === row && j === col) ||\r\n                    (i < 0 || i >= level) ||\r\n                    (j < 0 || j >= level)\r\n                ) {\r\n                    continue;\r\n                }\r\n                if (!grid[i][j].isMine && !grid[i][j].isOpen && !grid[i][j].markAsMine) {\r\n                    grid[i][j].isOpen = true;\r\n                    dispatch(openCell(grid[i][j]));\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function endGame() {\r\n    return (dispatch) => {\r\n        dispatch(calculateScore());\r\n        dispatch(gameOver(true));\r\n    };\r\n}\r\n\r\nexport function calculateScore() {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { mineMarked } = game;\r\n        const correctMines = mineMarked.filter(cell => cell.isMine);\r\n        const score = correctMines.length * SCORE_MULTIPLIER;\r\n        dispatch(changeScore(score));\r\n    };\r\n}\r\n\r\nexport function startOver(lvl) {\r\n    return (dispatch, getState) => {\r\n        const { game } = getState();\r\n        const { level } = game;\r\n        const stage = (lvl ? lvl : level);\r\n        dispatch(changeDifficultyLevel(stage));\r\n        dispatch(changeTotalMines(stage * 2));\r\n        dispatch(initGrid());\r\n    };\r\n}\r\n\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { startOver } from \"../actions/GamePlayActions\";\r\n\r\nconst propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass Level extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n    onChange(event) {\r\n        const { dispatch } = this.props;\r\n        dispatch(startOver(event.target.value));\r\n    }\r\n    render() {\r\n        const { game } = this.props;\r\n        const { levels } = game;\r\n        return (\r\n            <div>\r\n                <select onChange={this.onChange}>\r\n                    <option value={levels.EASY}>Easy</option>\r\n                    <option value={levels.MODRATE}>Moderate</option>\r\n                    <option value={levels.HARD}>Hard</option>\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nLevel.propTypes = propTypes;\r\n\r\nexport default Level;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag, faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Level from \"./Level\";\r\nimport { startOver } from \"../actions/GamePlayActions\";\r\n\r\nconst propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass Header extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleStartOver = this.handleStartOver.bind(this);\r\n    }\r\n    handleStartOver(e) {\r\n        const { dispatch } = this.props;\r\n        e.preventDefault();\r\n        dispatch(startOver());\r\n    }\r\n    render() {\r\n        const { game } = this.props;\r\n        const { mineMarked, totalMines, score } = game;\r\n        return (\r\n            <div className=\"game__bar\">\r\n                <div className=\"options\">\r\n                    <Level {...this.props} />\r\n                    <div className=\"white\"><FontAwesomeIcon icon={faFlag} />&nbsp;&nbsp;{totalMines - mineMarked.length}</div>\r\n                    <div className=\"white\">Score &nbsp;:&nbsp; {score}</div>\r\n                    <div className=\"white\" onClick={this.handleStartOver}><FontAwesomeIcon icon={faSync} /></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nHeader.propTypes = propTypes;\r\n\r\nexport default Header;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBomb } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst propTypes = {\r\n    cellData: PropTypes.object.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass Mine extends React.Component {\r\n    render() {\r\n        const { cellData, game } = this.props;\r\n        const { gameOver } = game;\r\n        if (cellData.isMine && cellData.isOpen && gameOver && !cellData.markAsMine) {\r\n            return (\r\n                <div className=\"mine\"><FontAwesomeIcon icon={faBomb} /></div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\nMine.propTypes = propTypes;\r\n\r\nexport default Mine;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst propTypes = {\r\n    cellData: PropTypes.object.isRequired,\r\n};\r\nclass PlaceHolder extends React.Component {\r\n    render() {\r\n        const { cellData } = this.props;\r\n        if (!cellData.isOpen) {\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n        if (cellData.neighbors === 0 && !cellData.isMine && !cellData.markAsMine) {\r\n            return (\r\n                \"\"\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\nPlaceHolder.propTypes = propTypes;\r\n\r\nexport default PlaceHolder;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst propTypes = {\r\n    cellData: PropTypes.object.isRequired,\r\n};\r\nclass Count extends React.Component {\r\n    render() {\r\n        const { cellData } = this.props;\r\n        const count = cellData.neighbors;\r\n        if (!(cellData.isMine) && count > 0 && cellData.isOpen) {\r\n            return (\r\n                <div className={`count__color_${count}`}> {count} </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\nCount.propTypes = propTypes;\r\n\r\nexport default Count;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { faFlag, faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst propTypes = {\r\n    cellData: PropTypes.object.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass FlagMark extends React.Component {\r\n    render() {\r\n        const { cellData, game } = this.props;\r\n        const { gameOver } = game;\r\n        if(cellData && cellData.markAsMine && !gameOver) {\r\n            return (\r\n                <div className=\"mine\"><FontAwesomeIcon icon={faFlag} /></div>\r\n            );\r\n        }\r\n        if(cellData && cellData.markAsMine && gameOver) {\r\n            if(cellData.isMine) {\r\n                return (\r\n                    <div className=\"mine\"><FontAwesomeIcon icon={faCheck} /></div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div className=\"mine\"><FontAwesomeIcon icon={faTimes} /></div>\r\n                );\r\n            }\r\n            \r\n        }\r\n        return null;\r\n    }\r\n}\r\nFlagMark.propTypes = propTypes;\r\n\r\nexport default FlagMark;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { openCell, markFlag, endGame } from \"../actions/GamePlayActions\";\r\nimport Mine from \"./Mine\";\r\nimport PlaceHolder from \"./PlaceHolder\";\r\nimport Count from \"./Count\";\r\nimport FlagMark from \"./FlagMark\";\r\nimport { openMines } from \"../actions/InitActions\";\r\n\r\nconst propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  cellData: PropTypes.object.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nclass Cell extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleFlagMark = this.handleFlagMark.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    const { dispatch, cellData, game } = this.props;\r\n    const { gameOver, mineMarked, totalMines } = game;\r\n    if (cellData.isMine && !gameOver && totalMines > mineMarked.length && !cellData.markAsMine) {\r\n      dispatch(openCell(cellData));\r\n      // Show all the mines to user as game is over\r\n      dispatch(openMines());\r\n      dispatch(endGame());\r\n      return;\r\n    }\r\n    if (!gameOver && !cellData.markAsMine) {\r\n      dispatch(openCell(cellData));\r\n    }\r\n  }\r\n\r\n  handleFlagMark() {\r\n    const { dispatch, cellData, game } = this.props;\r\n    const { gameOver, mineMarked=[], totalMines } = game;\r\n    if (cellData.markAsMine || (!cellData.isOpen && !gameOver && mineMarked.length < totalMines)) {\r\n      cellData.markAsMine = !cellData.markAsMine;\r\n      dispatch(markFlag(cellData));\r\n    }\r\n  }\r\n\r\n  getClassName() {\r\n    const { cellData } = this.props;\r\n    if (cellData.isOpen) {\r\n      return ((cellData.row + cellData.col) % 2 === 0 ? \"cell open--light\" : \"cell open--dark\");\r\n    }\r\n    return ((cellData.row + cellData.col) % 2 === 0 ? \"cell even\" : \"cell odd\");\r\n  }\r\n\r\n  render() {\r\n    const className = this.getClassName();\r\n    return (\r\n      <div className={`${className}`} onClick={this.handleClick} onContextMenu={this.handleFlagMark}>\r\n        <Mine {...this.props} />\r\n        <Count {...this.props} />\r\n        <PlaceHolder {...this.props} />\r\n        <FlagMark {...this.props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCell.propTypes = propTypes;\r\n\r\nexport default Cell;","import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBomb } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    cellData: PropTypes.object.isRequired,\r\n};\r\nclass CheatBoard extends Component {\r\n\r\n    renderMine() {\r\n      const { cellData } = this.props;\r\n      if(cellData.isMine) {\r\n        return (\r\n          <div className=\"mine\"><FontAwesomeIcon icon={faBomb} /></div>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    renderPlaceHolder() {\r\n      const { cellData } = this.props;\r\n\r\n      if(cellData.neighbors === 0 && !cellData.isMine) {\r\n        return (\r\n          <div>E</div>\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    renderCount() {\r\n      const { cellData } = this.props;\r\n      const count = cellData.neighbors;\r\n      if(!(cellData.isMine) && count > 0) {\r\n        return (\r\n          <div> {count} </div> \r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    render() {\r\n        const { cellData } = this.props;\r\n        const className = ((cellData.row + cellData.col) % 2 === 0 ? \"cell even\" : \"cell odd\");\r\n          return (\r\n            <div className={`${className}`}>\r\n               {this.renderMine()}\r\n               {this.renderCount()}\r\n               {this.renderPlaceHolder()}\r\n            </div>\r\n          );\r\n      }\r\n}\r\nCheatBoard.propTypes = propTypes;\r\n\r\nexport default CheatBoard;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport CheatBoard from \"./CheatBoard\";\r\n\r\nconst propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass Content extends React.Component {\r\n\r\n    renderItem(item, dummy) {\r\n        const key = `${item.row}-${item.col}`;\r\n        const { dispatch, game } = this.props;\r\n        if(dummy) {\r\n            return (\r\n                <td key={key} className=\"cell\"> <CheatBoard dispatch={dispatch} cellData={item} game={game}/> </td>\r\n              );    \r\n        }\r\n        return (\r\n          <td key={key} className=\"cell\"> <Cell dispatch={dispatch} cellData={item} game={game}/> </td>\r\n        );\r\n    }\r\n    renderRow(data, dummy) {\r\n        return ( \r\n         <tr>\r\n            {\r\n            data.map( cell => { return this.renderItem(cell, dummy); } )}\r\n           </tr>);\r\n    }\r\n    render() {\r\n        const { game } = this.props;\r\n        const { grid } = game;\r\n        return (\r\n            <div className=\"flex-test\">\r\n            <table cellPadding=\"0\">\r\n                <tbody>\r\n                    {grid.map(row => {return this.renderRow(row);})}\r\n                </tbody>\r\n            </table>\r\n            {/* uncomment below code to view CheatBoard view */}\r\n            {/*            \r\n             \r\n            <p>SPACE</p>\r\n            <table cellPadding=\"0\">\r\n                {grid.map(row => {return this.renderRow(row, true);})}\r\n            </table>\r\n           */}\r\n            </div>\r\n            \r\n          );\r\n      }\r\n\r\n}\r\nContent.propTypes = propTypes;\r\n\r\nexport default Content;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nconst propTypes = {\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass GameOver extends React.Component {\r\n    render() {\r\n        const { gameOver } = this.props.game;\r\n        if (gameOver) {\r\n            return (\r\n                    <div className=\"blink\"> Game Over </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n}\r\nGameOver.propTypes = propTypes;\r\n\r\nexport default GameOver;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { endGame } from \"../actions/GamePlayActions\";\r\nimport { openMines } from \"../actions/InitActions\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfo } from \"@fortawesome/free-solid-svg-icons\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nconst propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    game: PropTypes.object.isRequired,\r\n};\r\nclass Footer extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleFinish = this.handleFinish.bind(this);\r\n    }\r\n    handleFinish() {\r\n        const { dispatch } = this.props;\r\n        dispatch(openMines());\r\n        dispatch(endGame());\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game__bar\">\r\n                <div className=\"options\">\r\n                    <button onClick={this.handleFinish}>\r\n                        Finish\r\n                    </button>\r\n                    <div data-tip data-for=\"howToPlay\" className=\"white\"><FontAwesomeIcon icon={faInfo} /></div>\r\n                    <ReactTooltip id=\"howToPlay\" place=\"bottom\" effect=\"solid\">\r\n                        <ul>\r\n                            <li>Left-Click on the cell to open it.</li>\r\n                            <li>Right-Click to mark/unmark a cell as mine.</li>\r\n                            <li>Click Finish to check marked flags are correct.</li>\r\n                        </ul>\r\n                    </ReactTooltip>\r\n                </div>\r\n                <GameOver {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nFooter.propTypes = propTypes;\r\n\r\nexport default Footer;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Content from \"./Content\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\nclass Main extends React.Component {\r\n  render() {\r\n    const { game } = this.props;\r\n    const { grid } = game;\r\n    if (grid) {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"content\">\r\n            <div>\r\n              <Header {...this.props} />\r\n              <Content {...this.props} />\r\n              <Footer {...this.props}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (<div>Loading</div>);\r\n  }\r\n}\r\nMain.propTypes = propTypes;\r\n\r\nexport default Main;","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Main from \"./components/Main\";\r\nimport { startOver } from \"./actions/GamePlayActions\";\r\n\r\nconst propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  game: PropTypes.object.isRequired,\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n  componentDidMount() {\r\n    const { dispatch } = this.props;\r\n    dispatch(startOver());\r\n    document.addEventListener(\"contextmenu\", this.handleContextMenu);\r\n    \r\n  }\r\n  handleContextMenu = (e) => {\r\n    e.preventDefault();\r\n  }\r\n  render() {\r\n      return (\r\n        <div className=\"App\">\r\n            <Main {...this.props}/>\r\n        </div>\r\n      );\r\n  }\r\n}\r\nApp.propTypes = propTypes;\r\nexport default App;","import PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport App from \"../App\";\r\n\r\nconst propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n};\r\n\r\nclass AppContainer extends Component {\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n    console.log(info);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <App {...this.props} />        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAppContainer.propTypes = propTypes;\r\n\r\nfunction mapStateToProps(state) {\r\n  const { game } = state;\r\n  return {\r\n    game\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppContainer);\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default function configureStore(initialState) {\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(thunk),\r\n  );\r\n\r\n  return store;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.scss\";\r\nimport configureStore from \"./store/ConfigureStore\";\r\nimport InitialState from \"./store/InitialState\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppContainer from \"./containers/AppContainer\";\r\nconst store = configureStore(InitialState);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n        <AppContainer />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n"],"sourceRoot":""}